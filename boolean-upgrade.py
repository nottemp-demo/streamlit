import streamlit as st
import numpy as np
import emoji

@st.cache
def is_knight_move_possible(x1, y1, x2, y2):
    dx = abs(x2 - x1)
    dy = abs(y2 - y1)
    return (dx == 1 and dy == 2) or (dx == 2 and dy == 1)

def main():
    st.title("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–æ–¥–∞ –∫–æ–Ω—è")
    chessboard = np.full((8, 8), "‚¨ú", dtype=str)

    x1, y1 = st.columns(2)
    with x1:
        st.write("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É x1:")
        x1_coord = st.slider("", min_value=1, max_value=8, value=1)
    with y1:
        st.write("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É y1:")
        y1_coord = st.slider("", min_value=1, max_value=8, value=1)

    x2, y2 = st.columns(2)
    with x2:
        st.write("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É x2:")
        x2_coord = st.slider("", min_value=1, max_value=8, value=2)
    with y2:
        st.write("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É y2:")
        y2_coord = st.slider("", min_value=1, max_value=8, value=3)

    if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"):
        if is_knight_move_possible(x1_coord, y1_coord, x2_coord, y2_coord):
            st.success("–ö–æ–Ω—å –º–æ–∂–µ—Ç –ø–µ—Ä–µ–π—Ç–∏ —Å ({}, {}) –Ω–∞ ({}, {}) –∑–∞ –æ–¥–∏–Ω —Ö–æ–¥".format(x1_coord, y1_coord, x2_coord, y2_coord))
        else:
            st.error("–ö–æ–Ω—å –Ω–µ –º–æ–∂–µ—Ç –ø–µ—Ä–µ–π—Ç–∏ —Å ({}, {}) –Ω–∞ ({}, {}) –∑–∞ –æ–¥–∏–Ω —Ö–æ–¥".format(x1_coord, y1_coord, x2_coord, y2_coord))

    # Update the chessboard matrix with knight and target cell
    chessboard[y1_coord-1, x1_coord-1] = "üê¥"
    chessboard[y2_coord-1, x2_coord-1] = "üéØ"

    # Display the chessboard
    for row in chessboard:
        st.write(" ".join(row))

if __name__ == "__main__":
    main()
